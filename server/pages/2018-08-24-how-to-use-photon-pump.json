{"pageProps":{"source":{"compiledSource":"var N=Object.defineProperty,l=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var r=(a,n,t)=>n in a?N(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))o.call(n,t)&&r(a,t,n[t]);if(p)for(var t of p(n))c.call(n,t)&&r(a,t,n[t]);return a},m=(a,n)=>l(a,d(n));var i=(a,n)=>{var t={};for(var s in a)o.call(a,s)&&n.indexOf(s)<0&&(t[s]=a[s]);if(a!=null&&p)for(var s of p(a))n.indexOf(s)<0&&c.call(a,s)&&(t[s]=a[s]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var s=t,{components:a}=s,n=i(s,[\"components\"]);return mdx(MDXLayout,m(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`Hello, in this article, I'll try to explain what Photon-pump is, and write an easy\nexample so you can start using it for your own projects.`),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/madedotcom/photon-pump\"}),\"Photon-pump\"),` is a client for\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://eventstore.org/\"}),\"Event Store\"),\" we developed at \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://made.com\"}),\"made.com\"),`,\nit's the little brother to `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/madedotcom/atomicpuppy\"}),\"atomic puppy\"),`\n(which is another eventstore client), it's async first, works using TCP so it's also\nfaster (atomicpuppy uses HTTP).`),mdx(\"p\",null,`I won't talk about eventsourcing since it's been talked about on previous posts, so this\nwill be just a very simple and silly example of event sourcing.`),mdx(\"p\",null,`So, let's say we have a game, for a game to happen we need players, so we need to create\nthem. So we're going to pretend that we have an application that creates players, which\nwill later, create an event and place it in the appropriate stream of Event Store.`),mdx(\"p\",null,`This is the example of the \"player created\" event, it's a json blob:`),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"name\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Gil\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,`Now, we also need to pick a stream which is just a string representing the \"bucket\"\nwhere the event will be put, we'll use \"adventure\" which is the name of our imaginary\ngame, not very creative, but it's better than \"game\".`),mdx(\"p\",null,`An event will also have a type, which is like a sub category inside the stream. This is\nhow the event is looking like:`),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),\"Event\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\" stream\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"adventure\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"type\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"player_created\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" data\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"json\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"dumps\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"name\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Gil\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`))),mdx(\"p\",null,`So how would we add this event into Event Store using Photon-pump in a single python\nscript?`),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"#\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),` asyncio\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),` photonpump\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"async\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"write_event\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"conn\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"await\"),\" conn\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"publish_event\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'adventure'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'player_created'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        body`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'name'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'Gil'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"async\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"run\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"async\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"with\"),\" photonpump\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"connect\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'localhost'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"as\"),\" conn\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"await\"),\" write_event\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"conn\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" __name__ \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'__main__'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    event_loop `,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" asyncio\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"get_event_loop\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    event_loop`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"run_until_complete\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"run\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`))),mdx(\"p\",null,`So, line by line, we have an async function called write_event which will as the name\nstates, write the event into Event Store, using a Photon-pump connection passed in the\nargument.`),mdx(\"p\",null,`Next, we have the run function which will simply create the connection and pass it to\nwrite_event.`),mdx(\"p\",null,\"finally, the ugly if \",mdx(\"inlineCode\",{parentName:\"p\"},\"__name__ ...\"),\" to both create the \",mdx(\"inlineCode\",{parentName:\"p\"},\"event_loop\"),`, and run it\nsynchronously.`),mdx(\"p\",null,`Now if you have your Event Store running locally (if you don't change it in the script),\ngo to this url: `,mdx(\"inlineCode\",{parentName:\"p\"},\"http://localhost:2113/web/index.html#/streams/adventure\"),` and you should\nsee the new event there.`),mdx(\"p\",null,`Now that we have an event there, let's move on to the second part: reading the events\nfrom python, and doing something with them. For this post, we'll just stick with a\nsimple print.`),mdx(\"p\",null,`Since we wrote the event in the adventure stream, we want to read the events from that\nstream in a separate script.`),mdx(\"p\",null,\"Here is all the code we need:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"#reader.py\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),` asyncio\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),` photonpump\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"async\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"read_an_event\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"conn\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" event_record \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"await\"),\" conn\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"get\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'adventure'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"print\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"event_record\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"event\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"type\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" event_record\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"event\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"json\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"async\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"run\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"async\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"with\"),\" photonpump\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"connect\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'localhost'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"as\"),\" conn\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"await\"),\" read_an_event\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"conn\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" __name__ \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'__main__'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    event_loop `,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" asyncio\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"get_event_loop\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    event_loop`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"run_until_complete\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"run\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n`))),mdx(\"p\",null,\"Ignoring run and if \",mdx(\"inlineCode\",{parentName:\"p\"},\"__name__...\"),\" the \",mdx(\"inlineCode\",{parentName:\"p\"},\"read_an_event\"),` function uses the method get from\nPhoton-pump to collect all the events using it like an iterator and printing each of the\nevents. We get event_records, and each contains the event, so we can print out the type\nand the data.`),mdx(\"p\",null,`This was just a very simple example that I came up with, but if you want to make it more\nlike the real world, how about trying to follow the previous posts about CQRS using\nPhoton-pump to store and read the events.`),mdx(\"p\",null,\"Stay tuned for the next part where we will talk about subscriptions.\"),mdx(\"p\",null,`BONUS: If you want to replicate this code, you will need python 3.6+ (Remember to\ninstall Photon-pump `,mdx(\"inlineCode\",{parentName:\"p\"},\"pip install photon-pump\"),`) and docker or Event Store installed on\nyour machine. Simply start Event Store in docker\n(`,mdx(\"inlineCode\",{parentName:\"p\"},\"docker run -p 1113:1113 -p 2113:2113 eventstore/eventstore\"),`) and run those python\nscripts ( writer.py and reader.py) in sequence to see it work.`))}MDXContent.isMDXComponent=!0;\n","scope":{}},"date":"2018-08-24","layout":"post","title":"Using Photon-pump","author":"Gil","tags":["python","open-source","photonpump"]},"__N_SSG":true}