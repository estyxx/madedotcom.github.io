{"pageProps":{"source":{"compiledSource":"var c=Object.defineProperty,u=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(e,t,n)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,a=(e,t)=>{for(var n in t||(t={}))i.call(t,n)&&s(e,n,t[n]);if(p)for(var n of p(t))r.call(t,n)&&s(e,n,t[n]);return e},h=(e,t)=>u(e,m(t));var l=(e,t)=>{var n={};for(var o in e)i.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(e!=null&&p)for(var o of p(e))t.indexOf(o)<0&&r.call(e,o)&&(n[o]=e[o]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var o=n,{components:e}=o,t=l(o,[\"components\"]);return mdx(MDXLayout,h(a(a({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`Hello, in this article, I'll try to explain what Photon-pump is, and write an easy\nexample so you can start using it for your own projects.`),mdx(\"p\",null,\"Photon-pump \",\"[https://github.com/madedotcom/photon-pump]\",` is a client for Event Store\n`,\"[https://eventstore.org/]\",\" we developed at made.com \",\"[https://made.com]\",`, it's the little\nbrother to atomic puppy `,\"[https://github.com/madedotcom/atomicpuppy]\",` (which is another\neventstore client), it's async first, works using TCP so it's also faster (atomicpuppy\nuses HTTP).`),mdx(\"p\",null,`I won't talk about eventsourcing since it's been talked about on previous posts, so this\nwill be just a very simple and silly example of event sourcing.`),mdx(\"p\",null,`So, let's say we have a game, for a game to happen we need players, so we need to create\nthem. So we're going to pretend that we have an application that creates players, which\nwill later, create an event and place it in the appropriate stream of Event Store.`),mdx(\"p\",null,`This is the example of the \"player created\" event, it's a json blob:`),mdx(\"p\",null,'{\"name\": \"Gil\"}'),mdx(\"p\",null,`Now, we also need to pick a stream which is just a string representing the \"bucket\"\nwhere the event will be put, we'll use \"adventure\" which is the name of our imaginary\ngame, not very creative, but it's better than \"game\".`),mdx(\"p\",null,`An event will also have a type, which is like a sub category inside the stream. This is\nhow the event is looking like:`),mdx(\"p\",null,'Event( stream=\"adventure\", type=\"player_created\", data=json.dumps({\"name\": \"Gil\"}) )'),mdx(\"p\",null,`So how would we add this event into Event Store using Photon-pump in a single python\nscript?`),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),`# writer.py\n\nimport asyncio\n\nimport photonpump\n\nasync def write_event(conn):\n    await conn.publish_event(\n        'adventure',\n        'player_created',\n        body={'name': 'Gil'}\n    )\n\nasync def run():\n    async with photonpump.connect('localhost') as conn:\n        await write_event(conn)\n\nif **name** == '**main**':\n    event_loop = asyncio.get_event_loop()\n    event_loop.run_until_complete(run())\n`)),mdx(\"p\",null,`So, line by line, we have an async function called write_event which will as the name\nstates, write the event into Event Store, using a Photon-pump connection passed in the\nargument.`),mdx(\"p\",null,`Next, we have the run function which will simply create the connection and pass it to\nwrite_event.`),mdx(\"p\",null,\"finally, the ugly if \",\"_\",\"_\",`name... to both create the event_loop, and run it\nsynchronously.`),mdx(\"p\",null,`Now if you have your Event Store running locally (if you don't change it in the script),\ngo to this url: http://localhost:2113/web/index.html#/streams/adventure and you should\nsee the new event there.`),mdx(\"p\",null,`Now that we have an event there, let's move on to the second part: reading the events\nfrom python, and doing something with them. For this post, we'll just stick with a\nsimple print.`),mdx(\"p\",null,`Since we wrote the event in the adventure stream, we want to read the events from that\nstream in a separate script.`),mdx(\"p\",null,\"Here is all the code we need:\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),`#reader.py\n\nimport asyncio\nimport photonpump\n\nasync def read_an_event(conn):\n    for event_record in await conn.get('adventure'):\n        print(event_record.event.type, event_record.event.json())\n\nasync def run():\n    async with photonpump.connect('localhost') as conn:\n        await read_an_event(conn)\n\nif **name** == '**main**':\n    event_loop = asyncio.get_event_loop()\n    event_loop.run_until_complete(run())\n\n`)),mdx(\"p\",null,\"Ignoring run and if \",\"_\",\"_\",`name... the read_an_event function uses the method get from\nPhoton-pump to collect all the events using it like an iterator and printing each of the\nevents. We get event_records, and each contains the event, so we can print out the type\nand the data.`),mdx(\"p\",null,`This was just a very simple example that I came up with, but if you want to make it more\nlike the real world, how about trying to follow the previous posts about CQRS using\nPhoton-pump to store and read the events.`),mdx(\"p\",null,\"Stay tuned for the next part where we will talk about subscriptions.\"),mdx(\"p\",null,`BONUS: If you want to replicate this code, you will need python 3.6+ (Remember to\ninstall Photon-pump pip install photon-pump) and docker or Event Store installed on your\nmachine. Simply start Event Store in docker (docker run -p 1113:1113 -p 2113:2113\neventstore/eventstore) and run those python scripts ( writer.py and reader.py) in\nsequence to see it work.`))}MDXContent.isMDXComponent=!0;\n","scope":{}},"layout":"post","title":"Using Photon-pump","author":"Gil","tags":["python","open-source","photonpump"]},"__N_SSG":true}