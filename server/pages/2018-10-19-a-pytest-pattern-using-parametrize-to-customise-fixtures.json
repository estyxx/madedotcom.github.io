{"pageProps":{"source":{"compiledSource":"var u=Object.defineProperty,d=Object.defineProperties;var l=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var r=(e,n,t)=>n in e?u(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,a=(e,n)=>{for(var t in n||(n={}))o.call(n,t)&&r(e,t,n[t]);if(p)for(var t of p(n))c.call(n,t)&&r(e,t,n[t]);return e},m=(e,n)=>d(e,l(n));var N=(e,n)=>{var t={};for(var s in e)o.call(e,s)&&n.indexOf(s)<0&&(t[s]=e[s]);if(e!=null&&p)for(var s of p(e))n.indexOf(s)<0&&c.call(e,s)&&(t[s]=e[s]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var s=t,{components:e}=s,n=N(s,[\"components\"]);return mdx(MDXLayout,m(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`The problem: customisable fixtures in pytest Let's say you're running along merrily with\nsome fixtures that create database objects for you:`),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"fixture\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"supplier\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"db\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    s `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" Supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n        ref`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_ref\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        name`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        country`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"US\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"add\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"yield\"),` s\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"remove\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"fixture\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"product\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"db\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    p `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" Product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n        ref`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_ref\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        name`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        supplier`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        net_price`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"9.99\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"add\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"p\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"yield\"),` p\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"remove\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"p\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`))),mdx(\"p\",null,`And now you're writing a new test and you suddenly realise you need to customise your\ndefault \"supplier\" fixture:`),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"test_US_supplier_has_total_price_equal_net_price\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"assert\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"total_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`net_price\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"test_EU_supplier_has_total_price_including_VAT\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    supplier`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"country \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"FR\"'),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# oh, this doesn't work\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"assert\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"total_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"net_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1.2\"),`\n`))),mdx(\"p\",null,\"For whatever reason, maybe because you need to set the \",mdx(\"inlineCode\",{parentName:\"p\"},\"supplier.country\"),` before you add\nthings to the DB, or before you instantiate product objects, you need to be able to\nadjust the country field on your supplier feature.`),mdx(\"p\",null,`Option 1: more fixtures We can just create more fixtures, and try do do a bit of DRY by\nextracting out common logic:`),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"_default_supplier\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" Supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n        ref`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_ref\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        name`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"fixture\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"us_supplier\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"db\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    s `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" _default_supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    s`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"country \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"US\"'),`\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"add\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"yield\"),` s\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"remove\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"fixture\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"eu_supplier\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"db\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    s `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" _default_supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    s`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"country \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"FR\"'),`\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"add\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"yield\"),` s\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"remove\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`))),mdx(\"p\",null,`That's just one way you could do it, maybe you can figure out ways to reduce the\nduplication of the `,mdx(\"inlineCode\",{parentName:\"p\"},\"db.add()\"),` stuff as well, but you are going to have to have a\ndifferent, named fixture for each customisation of `,mdx(\"inlineCode\",{parentName:\"p\"},\"Supplier\"),`, and eventually you may\ndecide that doesn't scale. us_supplier, eu_supplier, asia_supplier, ch_supplier, etc\netc, too many fixtures! I'd like just one, customisable fixture please.`),mdx(\"p\",null,`Option 2: factory fixtures Instead of a fixture returning an object directly, it can\nreturn a function that creates an object, and that function can take arguments:`),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"fixture\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"make_supplier\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"db\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    s `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" Supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n        ref`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_ref\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        name`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"_make_supplier\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"country\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        s`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"country \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),` country\n        db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"add\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),` s\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"yield\"),` _make_supplier\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"remove\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`))),mdx(\"p\",null,`The problem with this is that, once you start, you tend to have to go all the way, and\nmake all of your fixture hierarchy into factory functions:`),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"test_EU_supplier_has_total_price_including_VAT\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"make_supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    supplier `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" make_supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"country\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"FR\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# OH, now this doesn't work, because it's too late again\"),`\n    product`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"supplier \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),` supplier\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"assert\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"total_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"net_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1.2\"),`\n`))),mdx(\"p\",null,\"And so...\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"fixture\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"make_product\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"db\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    p `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" Product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n        ref`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_ref\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        name`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"_make_product\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        p`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"supplier \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),` supplier\n        db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"add\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"p\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),` p\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"yield\"),` _make_product\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"remove\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"p\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"test_EU_supplier_has_total_price_including_VAT\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"make_supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" make_product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    supplier `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" make_supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"country\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"FR\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    product `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" make_product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"assert\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"total_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"net_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1.2\"),`\n`))),mdx(\"p\",null,`That works, but firstly now everything is a factory-fixture, which makes them more\nconvoluted, and secondly, your tests are filling up with extra calls to make_things, and\nyou're having to embed some of the domain knowledge of what-depends-on-what into your\ntests as well as your fixtures.`),mdx(\"p\",null,`Option 3: \"normal\" fixture parametrization This is a pretty cool feature of Pytest. You\nprobably already know that you can parametrize tests, injecting different values for\narguments to your test and then running the same test multiple times, once for each\nvalue:`),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"mark\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"parametrize\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'n'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"3\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"test_doubling\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"n\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"assert\"),\" n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"2\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"6\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# will pass twice and fail once\"),`\n`))),mdx(\"p\",null,`A slightly less well-known feature is that you can parametrize fixtures as well. You\nneed to use the special request fixture to access your parameters:`),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"fixture\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"params\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'US'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'FR'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"supplier\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"db\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" request\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    s `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" Supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n        ref`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_ref\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        name`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        country`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"request\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`param\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"add\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"yield\"),` s\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"remove\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`))),mdx(\"p\",null,`Now any test that depends on supplier, directly or indirectly, will be run twice, once\nwith supplier.country = US and once with FR.`),mdx(\"p\",null,`That's really cool for checking that a given piece of logic works in a variety of\ndifferent cases, but it's not really ideal in our case. We have to build a bunch of if\nlogic into our tests:`),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"test_US_supplier_has_no_VAT_but_EU_supplier_has_total_price_including_VAT\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"# this test is magically run twice, but:\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"country \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'US'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"assert\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"total_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`net_price\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"country \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'FR'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"assert\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"total_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"net_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1.2\"),`\n`))),mdx(\"p\",null,`So that's ugly, and on top of that, now every single test that depends (indirectly) on\nsupplier gets run twice, and some of those extra test runs may be totally irrelevant to\nwhat the country is.`),mdx(\"p\",null,`Presenting: using test parmetrization to override nested default-value fixtures We\nintroduce an extra fixture that holds a default value for the country field:`),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"fixture\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"country\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"US\"'),`\n\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"fixture\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"supplier\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"db\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" country\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    s `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" Supplier\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n        ref`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_ref\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        name`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"random_name\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        country`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"country\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"add\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"yield\"),` s\n    db`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"remove\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"s\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`))),mdx(\"p\",null,`And then in the tests that need to change it, we can use parametrize, even though the\ncountry fixture isn't explicitly named in that test:`),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-python\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-python\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"mark\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"parametrize\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'country'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"US\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"test_US_supplier_has_total_price_equal_net_price\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"assert\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"total_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`net_price\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token decorator annotation punctuation\"}),\"@pytest\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"mark\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),\"parametrize\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'country'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"EU\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"def\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"test_EU_supplier_has_total_price_including_VAT\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"assert\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"total_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" product\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"net_price \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"*\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1.2\"),`\n`))),mdx(\"p\",null,`Amazing huh? The only problem is that you're now likely to build a teetering tower of\nimplicit dependencies where the only way to find out what's actually happening is to\nspend ages spelunking in conftest.py, but, hey, if you didn't like crazy nested fixture\nmagic, why are you using pytest in the first place, right?`),mdx(\"p\",null,\"Reactions and alternative suggestions on a postcard please :)\"),mdx(\"hr\",null),mdx(\"p\",null,mdx(\"a\",a({parentName:\"p\"},{href:\"http://www.obeythetestinggoat.com/a-pytest-pattern-using-parametrize-to-customise-nested-fixtures.html\"}),\"Cross-posted from obeythetestinggoat.com\")),mdx(\"p\",null,`This blog post was inspired by a pattern I first explored at\n`,mdx(\"a\",a({parentName:\"p\"},{href:\"https://www.pythonanywhere.com/\"}),\"PythonAnywhere\"),`, which came up again recently; I found\nmyself writing two successive answers to this\n`,mdx(\"a\",a({parentName:\"p\"},{href:\"https://stackoverflow.com/questions/42228895/how-to-parametrize-a-pytest-fixture\"}),\"StackOverflow post\")),mdx(\"p\",null,`Code samples can be found\n`,mdx(\"a\",a({parentName:\"p\"},{href:\"https://github.com/hjwp/www.obeythetestinggoat.com/tree/master/example-code/pytest_overriding_nested_fixtures_pattern\"}),\"here\")))}MDXContent.isMDXComponent=!0;\n","scope":{}},"date":"2018-10-19","title":"A pytest pattern using parametrize to customize fixtures","layout":"post","author":"Harry","tags":["python","testing","open-source"]},"__N_SSG":true}